#include "main.h"
#include "general.h"
#include "lcd.h"
#include "timers.h"

unsigned char lcd_convertANSITable[256]={
						0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,//00
						0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,//10
						0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,//20
						0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x3a,0x3b,0x3c,0x3d,0x3e,0x3f,//30
						0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f,//40
						0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x2e,0x50,0x5e,0x5f,//50
						0x60,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,//60
						0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7a,0x2e,0xd1,0x2e,0xe9,0x2e,//70

						0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,//80
						0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,//90
						0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0xa2,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,//A0
						0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0xb5,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,//b0
						
						0x41,0xa0,0x42,0xa1,0xe0,0x45,0xa3,0xa4,0xa5,0xa6,0x4b,0xa7,0x4d,0x48,0x4f,0xa8,//А-П
						0x50,0x43,0x54,0xa9,0xaa,0x58,0xe1,0xab,0xac,0xe2,0xad,0xae,0x62,0xaf,0xb0,0xb1,//Р-Я
						0x61,0xb2,0xb3,0xb4,0xe3,0x65,0xb6,0xb7,0xb8,0xb9,0xba,0xbb,0xbc,0xbd,0x6f,0xbe,//а-п
						0x70,0x63,0xbf,0x79,0xe4,0x78,0xe5,0xc0,0xc1,0xe6,0xc2,0xc3,0xc4,0xc5,0xc6,0xc7,//р-я
					   };

#define lcd_SetLCDPorts DDRD|=0xe0
#define lcd_SetRW PORTD|=0x40
#define lcd_ClearRW PORTD&=0xbf
#define lcd_SetRS PORTD|=0x20
#define lcd_ClearRS PORTD&=0xdf
#define lcd_SetE1 PORTD|=0x80
#define lcd_ClearE1 PORTD&=0x7f
#define lcd_SetE2 PORTD|=0x80
#define lcd_ClearE2 PORTD&=0x7f
#define lcd_DataPortToIn DDRC&=0x00;PORTC&=0x00
#define lcd_DataPortToOut DDRC|=0xff

// rw - выход 1 

void lcd_WaitBuzy(char con);
void lcd_WriteCommand(char b,char con);
void lcd_WriteData(char b,char con);
void lcd_PutData(char b);
char lcd_GetData(void);
void lcd_LedControl();
void lcd_TimeFunc();

unsigned int lcd_time;
#define lcd_timeMax 10

void lcd_WaitBuzy(char con)
{
 char rd=128;
 while ((rd&0x80)>>7)
 {
   asm("wdr");
   lcd_ClearRS;lcd_SetRW;
   if (con==1) {lcd_SetE1;} else {lcd_SetE2;}
   rd=lcd_GetData();
   if (con==1) {lcd_ClearE1;} else {lcd_ClearE2;}
   lcd_ClearRW;lcd_DataPortToIn;
 };
}

void lcd_InitLCD(void)
{
 lcd_time=0;
 lcd_VDDOn;
 lcd_LEDOn;
 lcd_SetLCDPorts;
 lcd_DataPortToIn;
 delay(15);
 lcd_WriteCommand(0x30,1);
 delay(15);
 lcd_WriteCommand(0x30,1);
 delay(15);
 lcd_WriteCommand(0x30,1);
 lcd_WaitBuzy(1);lcd_WriteCommand(0x38,1);
 lcd_WaitBuzy(1);lcd_WriteCommand(0x0c,1);
 lcd_WaitBuzy(1);lcd_WriteCommand(0x06,1);
 lcd_WaitBuzy(1);lcd_WriteCommand(0x01,1);
 timers_RegVirtualTimer(&lcd_TimeFunc);
}

void lcd_PutData(char b)
{
 lcd_DataPortToOut;
 PORTC=b;
}

char lcd_GetData(void)
{
 lcd_DataPortToIn;
 return (PINC);
}

void lcd_WriteCommand(char b,char con)
{
 lcd_ClearRS;lcd_ClearRW;
 if (con==1) {lcd_SetE1;} else {lcd_SetE2;}
 lcd_PutData(b);
 if (con==1) {lcd_ClearE1;} else {lcd_ClearE2;}
 lcd_DataPortToIn;
}

void lcd_WriteData(char b,char con)
{
 lcd_SetRS;lcd_ClearRW;
 if (con==1) {lcd_SetE1;} else {lcd_SetE2;}
 lcd_PutData(b);
 if (con==1) {lcd_ClearE1;} else {lcd_ClearE2;}
 lcd_DataPortToIn;
}

void lcd_PutChar(char pos,char b)
{
 b=lcd_convertANSITable[b];
 if (pos<16) {lcd_WaitBuzy(1);lcd_WriteCommand((pos+128)|0x80,1);lcd_WaitBuzy(1);lcd_WriteData(b,1);}
 else if (pos<32) {lcd_WaitBuzy(1);lcd_WriteCommand((pos+176)|0x80,1);lcd_WaitBuzy(1);lcd_WriteData(b,1);}
       else if (pos<48) {lcd_WaitBuzy(1);lcd_WriteCommand((pos+112)|0x80,1);lcd_WaitBuzy(1);lcd_WriteData(b,1);}
             else {lcd_WaitBuzy(1);lcd_WriteCommand((pos+160)|0x80,1);lcd_WaitBuzy(1);lcd_WriteData(b,1);}
}			

void lcd_ClearLCD(void) {lcd_WriteCommand(1,1);};
void lcd_PutString(char position, char *pString)
{
 char i=0;char s;s=*(pString+i);
 while (s!=0) {lcd_PutChar(position+i,s);i++;s=*(pString+i);}
}

void lcd_PutNum(unsigned char pos,unsigned char num)
{
 char i,i1,i2;
 i=num/100;i1=(num-i*100)/10;i2=num-i*100-i1*10;
 if ((i==0)&&(i1==0)) {lcd_PutChar(pos,' ');lcd_PutChar(pos+1,' ');lcd_PutChar(pos+2,i2+0x30);}
 else if (i==0) {lcd_PutChar(pos,' ');lcd_PutChar(pos+1,i1+0x30);lcd_PutChar(pos+2,i2+0x30);}
 else {lcd_PutChar(pos,i+0x30);lcd_PutChar(pos+1,i1+0x30);lcd_PutChar(pos+2,i2+0x30);}
}

void lcd_PutNumf(unsigned char pos,unsigned char num)
{
 char i,i1,i2;
 i=num/100;i1=(num-i*100)/10;i2=num-i*100-i1*10;
 if (i!=0) {lcd_PutChar(pos,i+0x30);} else {lcd_PutChar(pos,' ');}
 lcd_PutChar(pos+1,i1+0x30);lcd_PutChar(pos+2,',');lcd_PutChar(pos+3,i2+0x30);
}

void lcd_PutNumf2(unsigned char pos,unsigned int num)
{
 unsigned int i0,i,i1,i2;
 i0=num/1000;i=(num-i0*1000)/100;i1=(num-i*100)/10;i2=num-i*100-i1*10;
 if (i0!=0) {lcd_PutChar(pos,i0+0x30);} else {lcd_PutChar(pos,' ');}
 if (i!=0) {lcd_PutChar(pos+1,i+0x30);} else {lcd_PutChar(pos+1,' ');}
 lcd_PutChar(pos+2,i1+0x30);lcd_PutChar(pos+3,',');lcd_PutChar(pos+4,i2+0x30);
}


void lcd_PutNum2(unsigned char pos,unsigned char num)
{
 char i,i1;
 i=num/10;i1=num-i*10;
 if (i!=0) {lcd_PutChar(pos,i+0x30);} else {lcd_PutChar(pos,' ');}
 lcd_PutChar(pos+1,i1+0x30);
}

void lcd_PutNum1(unsigned char pos,unsigned char num)
{
 char i,i1;
 i=num/10;i1=num-i*10;
 lcd_PutChar(pos,i1+0x30);
}

void lcd_TimeFunc()
{
 if (lcd_time==lcd_timeMax) {lcd_VEEOn;}
 if (lcd_time==lcd_timeMax+12) {lcd_VEEOff;lcd_time=0;}
 lcd_time++;
}



